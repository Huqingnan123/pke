!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_SIZE	pk.h	44;"	d
AT_ENTRY	elf.h	35;"	d
AT_FDCWD	syscall.h	71;"	d
AT_NULL	elf.h	30;"	d
AT_PAGESZ	elf.h	34;"	d
AT_PHDR	elf.h	31;"	d
AT_PHENT	elf.h	32;"	d
AT_PHNUM	elf.h	33;"	d
AT_RANDOM	elf.h	37;"	d
AT_SECURE	elf.h	36;"	d
CLOCK_FREQ	syscall.c	14;"	d	file:
EF_RISCV_RVC	elf.h	26;"	d
ERR_PTR	syscall.h	68;"	d
ET_DYN	elf.h	24;"	d
ET_EXEC	elf.h	23;"	d
Elf32_Ehdr	elf.h	/^} Elf32_Ehdr;$/;"	t	typeref:struct:__anon2
Elf32_Phdr	elf.h	/^} Elf32_Phdr;$/;"	t	typeref:struct:__anon4
Elf32_Shdr	elf.h	/^} Elf32_Shdr;$/;"	t	typeref:struct:__anon3
Elf32_Sym	elf.h	/^} Elf32_Sym;$/;"	t	typeref:struct:__anon5
Elf64_Ehdr	elf.h	/^} Elf64_Ehdr;$/;"	t	typeref:struct:__anon6
Elf64_Phdr	elf.h	/^} Elf64_Phdr;$/;"	t	typeref:struct:__anon8
Elf64_Shdr	elf.h	/^} Elf64_Shdr;$/;"	t	typeref:struct:__anon7
Elf64_Sym	elf.h	/^} Elf64_Sym;$/;"	t	typeref:struct:__anon9
Elf_Ehdr	elf.h	16;"	d
Elf_Ehdr	elf.h	19;"	d
Elf_Phdr	elf.h	17;"	d
Elf_Phdr	elf.h	20;"	d
IS_ELF	elf.h	8;"	d
IS_ELF32	elf.h	12;"	d
IS_ELF64	elf.h	13;"	d
IS_ERR_VALUE	syscall.h	67;"	d
MAP_ANONYMOUS	mmap.h	20;"	d
MAP_FIXED	mmap.h	19;"	d
MAP_POPULATE	mmap.h	21;"	d
MAP_PRIVATE	mmap.h	18;"	d
MAX_ARGS	pk.c	32;"	d	file:
MAX_FDS	file.c	12;"	d	file:
MAX_FILES	file.c	14;"	d	file:
MAX_VMR	mmap.c	21;"	d	file:
MREMAP_FIXED	mmap.h	22;"	d
OLD_SYSCALL_THRESHOLD	syscall.h	57;"	d
PF_R	elf.h	41;"	d
PF_W	elf.h	40;"	d
PF_X	elf.h	39;"	d
PROT_EXEC	mmap.h	16;"	d
PROT_NONE	mmap.h	13;"	d
PROT_READ	mmap.h	14;"	d
PROT_WRITE	mmap.h	15;"	d
PTR_ERR	syscall.h	69;"	d
PT_LOAD	elf.h	28;"	d
PUSH_ARG	pk.c	106;"	d	file:
STACK_INIT	pk.c	111;"	d	file:
SYS_access	syscall.h	62;"	d
SYS_brk	syscall.h	15;"	d
SYS_chdir	syscall.h	20;"	d
SYS_clock_gettime	syscall.h	52;"	d
SYS_close	syscall.h	13;"	d
SYS_dup	syscall.h	45;"	d
SYS_exit	syscall.h	6;"	d
SYS_exit_group	syscall.h	7;"	d
SYS_faccessat	syscall.h	24;"	d
SYS_fcntl	syscall.h	42;"	d
SYS_fstat	syscall.h	22;"	d
SYS_fstatat	syscall.h	23;"	d
SYS_ftruncate	syscall.h	43;"	d
SYS_getcwd	syscall.h	21;"	d
SYS_getdents	syscall.h	44;"	d
SYS_getegid	syscall.h	31;"	d
SYS_geteuid	syscall.h	29;"	d
SYS_getgid	syscall.h	30;"	d
SYS_getmainvars	syscall.h	37;"	d
SYS_getpid	syscall.h	8;"	d
SYS_getrlimit	syscall.h	49;"	d
SYS_getrusage	syscall.h	51;"	d
SYS_gettimeofday	syscall.h	40;"	d
SYS_getuid	syscall.h	28;"	d
SYS_ioctl	syscall.h	48;"	d
SYS_kill	syscall.h	9;"	d
SYS_link	syscall.h	59;"	d
SYS_linkat	syscall.h	16;"	d
SYS_lseek	syscall.h	14;"	d
SYS_lstat	syscall.h	64;"	d
SYS_madvise	syscall.h	55;"	d
SYS_mkdir	syscall.h	61;"	d
SYS_mkdirat	syscall.h	18;"	d
SYS_mmap	syscall.h	32;"	d
SYS_mprotect	syscall.h	35;"	d
SYS_mremap	syscall.h	34;"	d
SYS_munmap	syscall.h	33;"	d
SYS_open	syscall.h	58;"	d
SYS_openat	syscall.h	12;"	d
SYS_pread	syscall.h	25;"	d
SYS_prlimit64	syscall.h	36;"	d
SYS_pwrite	syscall.h	26;"	d
SYS_read	syscall.h	10;"	d
SYS_readlinkat	syscall.h	46;"	d
SYS_renameat	syscall.h	19;"	d
SYS_rt_sigaction	syscall.h	38;"	d
SYS_rt_sigprocmask	syscall.h	47;"	d
SYS_set_robust_list	syscall.h	54;"	d
SYS_set_tid_address	syscall.h	53;"	d
SYS_setrlimit	syscall.h	50;"	d
SYS_stat	syscall.h	63;"	d
SYS_time	syscall.h	65;"	d
SYS_times	syscall.h	41;"	d
SYS_uname	syscall.h	27;"	d
SYS_unlink	syscall.h	60;"	d
SYS_unlinkat	syscall.h	17;"	d
SYS_write	syscall.h	11;"	d
SYS_writev	syscall.h	39;"	d
_BOOT_H	boot.h	4;"	d
_ELF_H	elf.h	4;"	d
_FILE_H	file.h	4;"	d
_MMAP_H	mmap.h	4;"	d
_PK_H	pk.h	4;"	d
_PK_SYSCALL_H	syscall.h	4;"	d
_RISCV_FRONTEND_H	frontend.h	4;"	d
__continue_walk_create	mmap.c	/^static pte_t* __attribute__((noinline)) __continue_walk_create(uintptr_t addr, pte_t* pte)$/;"	f	file:
__do_brk	mmap.c	/^uintptr_t __do_brk(size_t addr)$/;"	f
__do_mmap	mmap.c	/^uintptr_t __do_mmap(uintptr_t addr, size_t length, int prot, int flags, file_t* f, off_t offset)$/;"	f
__do_munmap	mmap.c	/^static void __do_munmap(uintptr_t addr, size_t len)$/;"	f	file:
__handle_page_fault	mmap.c	/^static int __handle_page_fault(uintptr_t vaddr, int prot)$/;"	f	file:
__map_kernel_range	mmap.c	/^void __map_kernel_range(uintptr_t vaddr, uintptr_t paddr, size_t len, int prot)$/;"	f
__pad1	frontend.h	/^  uint64_t __pad1;$/;"	m	struct:frontend_stat
__pad2	frontend.h	/^  uint32_t __pad2;$/;"	m	struct:frontend_stat
__pad3	frontend.h	/^  uint64_t __pad3;$/;"	m	struct:frontend_stat
__pad4	frontend.h	/^  uint64_t __pad4;$/;"	m	struct:frontend_stat
__pad5	frontend.h	/^  uint64_t __pad5;$/;"	m	struct:frontend_stat
__page_alloc	mmap.c	/^static uintptr_t __page_alloc()$/;"	f	file:
__unused4	frontend.h	/^  uint32_t __unused4;$/;"	m	struct:frontend_stat
__unused5	frontend.h	/^  uint32_t __unused5;$/;"	m	struct:frontend_stat
__va_avail	mmap.c	/^static int __va_avail(uintptr_t vaddr)$/;"	f	file:
__valid_user_range	mmap.c	/^int __valid_user_range(uintptr_t vaddr, size_t len)$/;"	f
__vm_alloc	mmap.c	/^static uintptr_t __vm_alloc(size_t npage)$/;"	f	file:
__vmr_alloc	mmap.c	/^static vmr_t* __vmr_alloc(uintptr_t addr, size_t length, file_t* file,$/;"	f	file:
__vmr_decref	mmap.c	/^static void __vmr_decref(vmr_t* v, unsigned dec)$/;"	f	file:
__walk	mmap.c	/^static pte_t* __walk(uintptr_t addr)$/;"	f	file:
__walk_create	mmap.c	/^static pte_t* __walk_create(uintptr_t addr)$/;"	f	file:
__walk_internal	mmap.c	/^static pte_t* __walk_internal(uintptr_t addr, int create)$/;"	f	file:
addr	mmap.c	/^  uintptr_t addr;$/;"	m	struct:__anon10	file:
arg_buf	pk.c	/^} arg_buf;$/;"	t	typeref:union:__anon11	file:
argv	pk.c	/^  char* argv[MAX_ARGS];$/;"	m	union:__anon11	file:
at_kfd	syscall.c	/^static int at_kfd(int dirfd)$/;"	f	file:
atime	frontend.h	/^  uint64_t atime;$/;"	m	struct:frontend_stat
badvaddr	pk.h	/^  long badvaddr;$/;"	m	struct:__anon12
bias	boot.h	/^  size_t bias;$/;"	m	struct:__anon1
blksize	frontend.h	/^  uint32_t blksize;$/;"	m	struct:frontend_stat
blocks	frontend.h	/^  uint64_t blocks;$/;"	m	struct:frontend_stat
boot_loader	pk.c	/^void boot_loader(uintptr_t dtb)$/;"	f
boot_other_hart	pk.c	/^void boot_other_hart(uintptr_t dtb)$/;"	f
brk	boot.h	/^  size_t brk;$/;"	m	struct:__anon1
brk_max	boot.h	/^  size_t brk_max;$/;"	m	struct:__anon1
brk_min	boot.h	/^  size_t brk_min;$/;"	m	struct:__anon1
buf	pk.c	/^  uint64_t buf[MAX_ARGS];$/;"	m	union:__anon11	file:
cause	pk.h	/^  long cause;$/;"	m	struct:__anon12
copy_stat	frontend.c	/^void copy_stat(struct stat* dest, struct frontend_stat* src)$/;"	f
ctime	frontend.h	/^  uint64_t ctime;$/;"	m	struct:frontend_stat
current	pk.c	/^elf_info current;$/;"	v
cycle0	boot.h	/^  size_t cycle0;$/;"	m	struct:__anon1
demand_paging	mmap.c	/^int demand_paging = 1; \/\/ unless -p flag is given$/;"	v
dev	frontend.h	/^  uint64_t dev;$/;"	m	struct:frontend_stat
disabled_hart_mask	pk.c	/^long disabled_hart_mask;$/;"	v
do_brk	mmap.c	/^uintptr_t do_brk(size_t addr)$/;"	f
do_mmap	mmap.c	/^uintptr_t do_mmap(uintptr_t addr, size_t length, int prot, int flags, int fd, off_t offset)$/;"	f
do_mprotect	mmap.c	/^uintptr_t do_mprotect(uintptr_t addr, size_t length, int prot)$/;"	f
do_mremap	mmap.c	/^uintptr_t do_mremap(uintptr_t addr, size_t old_size, size_t new_size, int flags)$/;"	f
do_munmap	mmap.c	/^int do_munmap(uintptr_t addr, size_t length)$/;"	f
do_panic	console.c	/^void do_panic(const char* s, ...)$/;"	f
do_syscall	syscall.c	/^long do_syscall(long a0, long a1, long a2, long a3, long a4, long a5, unsigned long n)$/;"	f
dump_tf	console.c	/^void dump_tf(trapframe_t* tf)$/;"	f
e_ehsize	elf.h	/^  uint16_t e_ehsize;$/;"	m	struct:__anon2
e_ehsize	elf.h	/^  uint16_t e_ehsize;$/;"	m	struct:__anon6
e_entry	elf.h	/^  uint32_t e_entry;$/;"	m	struct:__anon2
e_entry	elf.h	/^  uint64_t e_entry;$/;"	m	struct:__anon6
e_flags	elf.h	/^  uint32_t e_flags;$/;"	m	struct:__anon2
e_flags	elf.h	/^  uint32_t e_flags;$/;"	m	struct:__anon6
e_ident	elf.h	/^  uint8_t  e_ident[16];$/;"	m	struct:__anon2
e_ident	elf.h	/^  uint8_t  e_ident[16];$/;"	m	struct:__anon6
e_machine	elf.h	/^  uint16_t e_machine;$/;"	m	struct:__anon2
e_machine	elf.h	/^  uint16_t e_machine;$/;"	m	struct:__anon6
e_phentsize	elf.h	/^  uint16_t e_phentsize;$/;"	m	struct:__anon2
e_phentsize	elf.h	/^  uint16_t e_phentsize;$/;"	m	struct:__anon6
e_phnum	elf.h	/^  uint16_t e_phnum;$/;"	m	struct:__anon2
e_phnum	elf.h	/^  uint16_t e_phnum;$/;"	m	struct:__anon6
e_phoff	elf.h	/^  uint32_t e_phoff;$/;"	m	struct:__anon2
e_phoff	elf.h	/^  uint64_t e_phoff;$/;"	m	struct:__anon6
e_shentsize	elf.h	/^  uint16_t e_shentsize;$/;"	m	struct:__anon2
e_shentsize	elf.h	/^  uint16_t e_shentsize;$/;"	m	struct:__anon6
e_shnum	elf.h	/^  uint16_t e_shnum;$/;"	m	struct:__anon2
e_shnum	elf.h	/^  uint16_t e_shnum;$/;"	m	struct:__anon6
e_shoff	elf.h	/^  uint32_t e_shoff;$/;"	m	struct:__anon2
e_shoff	elf.h	/^  uint64_t e_shoff;$/;"	m	struct:__anon6
e_shstrndx	elf.h	/^  uint16_t e_shstrndx;$/;"	m	struct:__anon2
e_shstrndx	elf.h	/^  uint16_t e_shstrndx;$/;"	m	struct:__anon6
e_type	elf.h	/^  uint16_t e_type;$/;"	m	struct:__anon2
e_type	elf.h	/^  uint16_t e_type;$/;"	m	struct:__anon6
e_version	elf.h	/^  uint32_t e_version;$/;"	m	struct:__anon2
e_version	elf.h	/^  uint32_t e_version;$/;"	m	struct:__anon6
elf_info	boot.h	/^} elf_info;$/;"	t	typeref:struct:__anon1
entry	boot.h	/^  size_t entry;$/;"	m	struct:__anon1
epc	pk.h	/^  long epc;$/;"	m	struct:__anon12
fd_close	file.c	/^int fd_close(int fd)$/;"	f
fds	file.c	/^static file_t* fds[MAX_FDS];$/;"	v	file:
file	file.h	/^typedef struct file$/;"	s
file	mmap.c	/^  file_t* file;$/;"	m	struct:__anon10	file:
file_decref	file.c	/^void file_decref(file_t* f)$/;"	f
file_dup	file.c	/^int file_dup(file_t* f)$/;"	f
file_get	file.c	/^file_t* file_get(int fd)$/;"	f
file_get_free	file.c	/^static file_t* file_get_free()$/;"	f	file:
file_incref	file.c	/^void file_incref(file_t* f)$/;"	f
file_init	file.c	/^void file_init()$/;"	f
file_lseek	file.c	/^ssize_t file_lseek(file_t* f, size_t ptr, int dir)$/;"	f
file_open	file.c	/^file_t* file_open(const char* fn, int flags, int mode)$/;"	f
file_openat	file.c	/^file_t* file_openat(int dirfd, const char* fn, int flags, int mode)$/;"	f
file_pread	file.c	/^ssize_t file_pread(file_t* f, void* buf, size_t size, off_t offset)$/;"	f
file_pwrite	file.c	/^ssize_t file_pwrite(file_t* f, const void* buf, size_t size, off_t offset)$/;"	f
file_read	file.c	/^ssize_t file_read(file_t* f, void* buf, size_t size)$/;"	f
file_stat	file.c	/^int file_stat(file_t* f, struct stat* s)$/;"	f
file_t	file.h	/^} file_t;$/;"	t	typeref:struct:file
file_truncate	file.c	/^int file_truncate(file_t* f, off_t len)$/;"	f
file_write	file.c	/^ssize_t file_write(file_t* f, const void* buf, size_t size)$/;"	f
files	file.c	/^file_t files[MAX_FILES] = {[0 ... MAX_FILES-1] = {-1,0}};$/;"	v
first_free_paddr	mmap.c	/^uintptr_t first_free_paddr;$/;"	v
first_free_page	mmap.c	/^static uintptr_t first_free_page;$/;"	v	file:
free_pages	mmap.c	/^static size_t free_pages;$/;"	v	file:
frontend_stat	frontend.h	/^struct frontend_stat {$/;"	s
frontend_syscall	frontend.c	/^long frontend_syscall(long n, uint64_t a0, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)$/;"	f
get_prot	elf.c	/^static inline int get_prot(uint32_t p_flags)$/;"	f	file:
gid	frontend.h	/^  uint32_t gid;$/;"	m	struct:frontend_stat
gpr	pk.h	/^  long gpr[32];$/;"	m	struct:__anon12
handle_breakpoint	handlers.c	/^static void handle_breakpoint(trapframe_t* tf)$/;"	f	file:
handle_fault_fetch	handlers.c	/^static void handle_fault_fetch(trapframe_t* tf)$/;"	f	file:
handle_fault_load	handlers.c	/^static void handle_fault_load(trapframe_t* tf)$/;"	f	file:
handle_fault_store	handlers.c	/^static void handle_fault_store(trapframe_t* tf)$/;"	f	file:
handle_illegal_instruction	handlers.c	/^static void handle_illegal_instruction(trapframe_t* tf)$/;"	f	file:
handle_instruction_access_fault	handlers.c	/^static void handle_instruction_access_fault(trapframe_t *tf)$/;"	f	file:
handle_interrupt	handlers.c	/^static void handle_interrupt(trapframe_t* tf)$/;"	f	file:
handle_load_access_fault	handlers.c	/^static void handle_load_access_fault(trapframe_t *tf)$/;"	f	file:
handle_misaligned_fetch	handlers.c	/^static void handle_misaligned_fetch(trapframe_t* tf)$/;"	f	file:
handle_misaligned_load	handlers.c	/^static void handle_misaligned_load(trapframe_t* tf)$/;"	f	file:
handle_misaligned_store	handlers.c	/^static void handle_misaligned_store(trapframe_t* tf)$/;"	f	file:
handle_option	pk.c	/^static void handle_option(const char* s)$/;"	f	file:
handle_page_fault	mmap.c	/^int handle_page_fault(uintptr_t vaddr, int prot)$/;"	f
handle_store_access_fault	handlers.c	/^static void handle_store_access_fault(trapframe_t *tf)$/;"	f	file:
handle_syscall	handlers.c	/^static void handle_syscall(trapframe_t* tf)$/;"	f	file:
handle_trap	handlers.c	/^void handle_trap(trapframe_t* tf)$/;"	f
init_tf	pk.c	/^static void init_tf(trapframe_t* tf, long pc, long sp)$/;"	f	file:
ino	frontend.h	/^  uint64_t ino;$/;"	m	struct:frontend_stat
insn	pk.h	/^  long insn;$/;"	m	struct:__anon12
insn_len	pk.h	/^static inline int insn_len(long insn)$/;"	f
instret0	boot.h	/^  size_t instret0;$/;"	m	struct:__anon1
is_supervisor	boot.h	/^  int is_supervisor;$/;"	m	struct:__anon1
kassert	pk.h	24;"	d
kassert_fail	console.c	/^void kassert_fail(const char* s)$/;"	f
kfd	file.h	/^  int kfd; \/\/ file descriptor on the host side of the HTIF$/;"	m	struct:file
length	mmap.c	/^  size_t length;$/;"	m	struct:__anon10	file:
load_elf	elf.c	/^void load_elf(const char* fn, elf_info* info)$/;"	f
mmap_max	boot.h	/^  size_t mmap_max;$/;"	m	struct:__anon1
mode	frontend.h	/^  uint32_t mode;$/;"	m	struct:frontend_stat
mtime	frontend.h	/^  uint64_t mtime;$/;"	m	struct:frontend_stat
next_free_page	mmap.c	/^static size_t next_free_page;$/;"	v	file:
nlink	frontend.h	/^  uint32_t nlink;$/;"	m	struct:frontend_stat
offset	mmap.c	/^  size_t offset;$/;"	m	struct:__anon10	file:
p_align	elf.h	/^  uint32_t p_align;$/;"	m	struct:__anon4
p_align	elf.h	/^  uint64_t p_align;$/;"	m	struct:__anon8
p_filesz	elf.h	/^  uint32_t p_filesz;$/;"	m	struct:__anon4
p_filesz	elf.h	/^  uint64_t p_filesz;$/;"	m	struct:__anon8
p_flags	elf.h	/^  uint32_t p_flags;$/;"	m	struct:__anon4
p_flags	elf.h	/^  uint32_t p_flags;$/;"	m	struct:__anon8
p_memsz	elf.h	/^  uint32_t p_memsz;$/;"	m	struct:__anon4
p_memsz	elf.h	/^  uint64_t p_memsz;$/;"	m	struct:__anon8
p_offset	elf.h	/^  uint32_t p_offset;$/;"	m	struct:__anon4
p_offset	elf.h	/^  uint64_t p_offset;$/;"	m	struct:__anon8
p_paddr	elf.h	/^  uint32_t p_paddr;$/;"	m	struct:__anon4
p_paddr	elf.h	/^  uint64_t p_paddr;$/;"	m	struct:__anon8
p_type	elf.h	/^  uint32_t p_type;$/;"	m	struct:__anon4
p_type	elf.h	/^  uint32_t p_type;$/;"	m	struct:__anon8
p_vaddr	elf.h	/^  uint32_t p_vaddr;$/;"	m	struct:__anon4
p_vaddr	elf.h	/^  uint64_t p_vaddr;$/;"	m	struct:__anon8
panic	pk.h	23;"	d
parse_args	pk.c	/^static size_t parse_args(arg_buf* args)$/;"	f	file:
phdr	boot.h	/^  size_t phdr;$/;"	m	struct:__anon1
phdr_size	boot.h	/^  size_t phdr_size;$/;"	m	struct:__anon1
phent	boot.h	/^  int phent;$/;"	m	struct:__anon1
phnum	boot.h	/^  int phnum;$/;"	m	struct:__anon1
pk_vm_init	mmap.c	/^uintptr_t pk_vm_init()$/;"	f
populate_mapping	mmap.c	/^void populate_mapping(const void* start, size_t size, int prot)$/;"	f
ppn	mmap.c	/^static uintptr_t ppn(uintptr_t addr)$/;"	f	file:
printk	console.c	/^void printk(const char* s, ...)$/;"	f
prot	mmap.c	/^  int prot;$/;"	m	struct:__anon10	file:
prot_to_type	mmap.c	/^static inline pte_t prot_to_type(int prot, int user)$/;"	f	file:
pt_idx	mmap.c	/^static size_t pt_idx(uintptr_t addr, int level)$/;"	f	file:
pte_ppn	mmap.c	/^static size_t pte_ppn(pte_t pte)$/;"	f	file:
rdev	frontend.h	/^  uint64_t rdev;$/;"	m	struct:frontend_stat
refcnt	file.h	/^  uint32_t refcnt;$/;"	m	struct:file
refcnt	mmap.c	/^  unsigned refcnt;$/;"	m	struct:__anon10	file:
rest_of_boot_loader	pk.c	/^static void rest_of_boot_loader(uintptr_t kstack_top)$/;"	f	file:
run_loaded_program	pk.c	/^static void run_loaded_program(size_t argc, char** argv, uintptr_t kstack_top)$/;"	f	file:
segfault	handlers.c	/^static void segfault(trapframe_t* tf, uintptr_t addr, const char* type)$/;"	f	file:
sh_addr	elf.h	/^  uint32_t sh_addr;$/;"	m	struct:__anon3
sh_addr	elf.h	/^  uint64_t sh_addr;$/;"	m	struct:__anon7
sh_addralign	elf.h	/^  uint32_t sh_addralign;$/;"	m	struct:__anon3
sh_addralign	elf.h	/^  uint64_t sh_addralign;$/;"	m	struct:__anon7
sh_entsize	elf.h	/^  uint32_t sh_entsize;$/;"	m	struct:__anon3
sh_entsize	elf.h	/^  uint64_t sh_entsize;$/;"	m	struct:__anon7
sh_flags	elf.h	/^  uint32_t sh_flags;$/;"	m	struct:__anon3
sh_flags	elf.h	/^  uint64_t sh_flags;$/;"	m	struct:__anon7
sh_info	elf.h	/^  uint32_t sh_info;$/;"	m	struct:__anon3
sh_info	elf.h	/^  uint32_t sh_info;$/;"	m	struct:__anon7
sh_link	elf.h	/^  uint32_t sh_link;$/;"	m	struct:__anon3
sh_link	elf.h	/^  uint32_t sh_link;$/;"	m	struct:__anon7
sh_name	elf.h	/^  uint32_t sh_name;$/;"	m	struct:__anon3
sh_name	elf.h	/^  uint32_t sh_name;$/;"	m	struct:__anon7
sh_offset	elf.h	/^  uint32_t sh_offset;$/;"	m	struct:__anon3
sh_offset	elf.h	/^  uint64_t sh_offset;$/;"	m	struct:__anon7
sh_size	elf.h	/^  uint32_t sh_size;$/;"	m	struct:__anon3
sh_size	elf.h	/^  uint64_t sh_size;$/;"	m	struct:__anon7
sh_type	elf.h	/^  uint32_t sh_type;$/;"	m	struct:__anon3
sh_type	elf.h	/^  uint32_t sh_type;$/;"	m	struct:__anon7
shutdown	frontend.c	/^void shutdown(int code)$/;"	f
size	frontend.h	/^  uint64_t size;$/;"	m	struct:frontend_stat
st_info	elf.h	/^  uint8_t  st_info;$/;"	m	struct:__anon5
st_info	elf.h	/^  uint8_t  st_info;$/;"	m	struct:__anon9
st_name	elf.h	/^  uint32_t st_name;$/;"	m	struct:__anon5
st_name	elf.h	/^  uint32_t st_name;$/;"	m	struct:__anon9
st_other	elf.h	/^  uint8_t  st_other;$/;"	m	struct:__anon5
st_other	elf.h	/^  uint8_t  st_other;$/;"	m	struct:__anon9
st_shndx	elf.h	/^  uint16_t st_shndx;$/;"	m	struct:__anon5
st_shndx	elf.h	/^  uint16_t st_shndx;$/;"	m	struct:__anon9
st_size	elf.h	/^  uint32_t st_size;$/;"	m	struct:__anon5
st_size	elf.h	/^  uint64_t st_size;$/;"	m	struct:__anon9
st_value	elf.h	/^  uint32_t st_value;$/;"	m	struct:__anon5
st_value	elf.h	/^  uint64_t st_value;$/;"	m	struct:__anon9
stack_top	boot.h	/^  size_t stack_top;$/;"	m	struct:__anon1
start_user	entry.S	/^start_user:$/;"	l
status	pk.h	/^  long status;$/;"	m	struct:__anon12
stderr	file.h	19;"	d
stdin	file.h	17;"	d
stdout	file.h	18;"	d
sys_access	syscall.c	/^long sys_access(const char *name, int mode)$/;"	f
sys_brk	syscall.c	/^size_t sys_brk(size_t pos)$/;"	f
sys_chdir	syscall.c	/^int sys_chdir(const char *path)$/;"	f
sys_clock_gettime	syscall.c	/^long sys_clock_gettime(int clk_id, long *loc)$/;"	f
sys_close	syscall.c	/^int sys_close(int fd)$/;"	f
sys_dup	syscall.c	/^int sys_dup(int fd)$/;"	f
sys_exit	syscall.c	/^void sys_exit(int code)$/;"	f
sys_faccessat	syscall.c	/^long sys_faccessat(int dirfd, const char *name, int mode)$/;"	f
sys_fcntl	syscall.c	/^int sys_fcntl(int fd, int cmd, int arg)$/;"	f
sys_fstat	syscall.c	/^int sys_fstat(int fd, void* st)$/;"	f
sys_fstatat	syscall.c	/^long sys_fstatat(int dirfd, const char* name, void* st, int flags)$/;"	f
sys_ftruncate	syscall.c	/^int sys_ftruncate(int fd, off_t len)$/;"	f
sys_getcwd	syscall.c	/^long sys_getcwd(const char* buf, size_t size)$/;"	f
sys_getdents	syscall.c	/^int sys_getdents(int fd, void* dirbuf, int count)$/;"	f
sys_getpid	syscall.c	/^pid_t sys_getpid()$/;"	f
sys_gettimeofday	syscall.c	/^int sys_gettimeofday(long* loc)$/;"	f
sys_getuid	syscall.c	/^int sys_getuid()$/;"	f
sys_link	syscall.c	/^long sys_link(const char* old_name, const char* new_name)$/;"	f
sys_linkat	syscall.c	/^long sys_linkat(int old_dirfd, const char* old_name, int new_dirfd, const char* new_name, int flags)$/;"	f
sys_lseek	syscall.c	/^ssize_t sys_lseek(int fd, size_t ptr, int dir)$/;"	f
sys_lstat	syscall.c	/^long sys_lstat(const char* name, void* st)$/;"	f
sys_mkdir	syscall.c	/^long sys_mkdir(const char* name, int mode)$/;"	f
sys_mkdirat	syscall.c	/^long sys_mkdirat(int dirfd, const char* name, int mode)$/;"	f
sys_mmap	syscall.c	/^uintptr_t sys_mmap(uintptr_t addr, size_t length, int prot, int flags, int fd, off_t offset)$/;"	f
sys_mprotect	syscall.c	/^uintptr_t sys_mprotect(uintptr_t addr, size_t length, int prot)$/;"	f
sys_mremap	syscall.c	/^uintptr_t sys_mremap(uintptr_t addr, size_t old_size, size_t new_size, int flags)$/;"	f
sys_munmap	syscall.c	/^int sys_munmap(uintptr_t addr, size_t length)$/;"	f
sys_open	syscall.c	/^int sys_open(const char* name, int flags, int mode)$/;"	f
sys_openat	syscall.c	/^int sys_openat(int dirfd, const char* name, int flags, int mode)$/;"	f
sys_pread	syscall.c	/^ssize_t sys_pread(int fd, char* buf, size_t n, off_t offset)$/;"	f
sys_read	syscall.c	/^ssize_t sys_read(int fd, char* buf, size_t n)$/;"	f
sys_renameat	syscall.c	/^int sys_renameat(int old_fd, const char *old_path, int new_fd, const char *new_path) {$/;"	f
sys_rt_sigaction	syscall.c	/^int sys_rt_sigaction(int sig, const void* act, void* oact, size_t sssz)$/;"	f
sys_stat	syscall.c	/^long sys_stat(const char* name, void* st)$/;"	f
sys_stub_nosys	syscall.c	/^static int sys_stub_nosys()$/;"	f	file:
sys_stub_success	syscall.c	/^static int sys_stub_success()$/;"	f	file:
sys_time	syscall.c	/^long sys_time(long* loc)$/;"	f
sys_times	syscall.c	/^int sys_times(long* loc)$/;"	f
sys_uname	syscall.c	/^int sys_uname(void* buf)$/;"	f
sys_unlink	syscall.c	/^long sys_unlink(const char* name)$/;"	f
sys_unlinkat	syscall.c	/^long sys_unlinkat(int dirfd, const char* name, int flags)$/;"	f
sys_write	syscall.c	/^ssize_t sys_write(int fd, const char* buf, size_t n)$/;"	f
sys_writev	syscall.c	/^ssize_t sys_writev(int fd, const long* iov, int cnt)$/;"	f
syscall_t	syscall.c	/^typedef long (*syscall_t)(long, long, long, long, long, long, long);$/;"	t	file:
time0	boot.h	/^  size_t time0;$/;"	m	struct:__anon1
trap_entry	entry.S	/^trap_entry:$/;"	l
trapframe_t	pk.h	/^} trapframe_t;$/;"	t	typeref:struct:__anon12
uid	frontend.h	/^  uint32_t uid;$/;"	m	struct:frontend_stat
va2pa	mmap.h	37;"	d
vm_lock	mmap.c	/^static spinlock_t vm_lock = SPINLOCK_INIT;$/;"	v	file:
vmr_t	mmap.c	/^} vmr_t;$/;"	t	typeref:struct:__anon10	file:
vmrs	mmap.c	/^static vmr_t* vmrs;$/;"	v	file:
vprintk	console.c	/^static void vprintk(const char* s, va_list vl)$/;"	f	file:
