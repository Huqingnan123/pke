#!/usr/bin/env python
#coding:utf-8

from gradelib import *

runner = Runner()

@test(0, "build pk")
def test_build_pk():
	runner.run_build_pk()
	
@test(0, "running app5_2")
def test_app4():
	runner.run_app('app5_2')

@test(20, "test sema", parent='app5_2')
def test_fork():
    with open("pke_out.txt", "r") as f:  
        text=f.read()
    lines = text.splitlines()
    total_produce=0
    child2_consume=0
    child3_consume=0
    for i, line in enumerate(lines):
        procude_patten = re.compile(r'(?<=total procude )\d+')
        consume1_patten = re.compile(r'(?<=child 2 total consume )\d+')
        consume2_patten = re.compile(r'(?<=child 3 total consume )\d+')
        produce=procude_patten.findall(line)
        consume1=consume1_patten.findall(line)
        consume2=consume2_patten.findall(line)  
        if len(produce)!=0:
            total_produce=int(produce[0])
        if len(consume1)!=0:
            child2_consume=int(consume1[0])
        if len(consume2)!=0:
            child3_consume=int(consume2[0])



    if child2_consume+child3_consume != total_produce or total_produce == 0 :
         errMsg='error the father produce '+str(total_produce)+'； the child2 consume '+str(child2_consume)+' ；the child3 consume '+str(child3_consume)
         raise AssertionError(errMsg)

show_grade()	

